<?php
defined('BASEPATH') OR exit('No direct script access allowed');
require_once(APPPATH.'/libraries/REST_Controller.php');
use Restserver\libraries\REST_Controller;

class Carga extends REST_Controller {

public function __construct()
{
header("Access-Control-Allow-Origin: *");
  header("Access-Control-Allow-Methods: PUT, GET, POST, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Content-Length, Accept-Encoding");


  parent::__construct();
  $this->load->database();
}

public function Arconmov_get() //TOMA DE artprev los datos y los sube a la app
{
  $query = $this->db->get('arconmov');  // Produces: SELECT * FROM mytable
  $resp=$query->result_array();

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
  $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"error"
    );
  $this->response($respuesta);
  }
}

public function Artsucursal_get() //TOMA DE artprev los datos y los sube a la app
{
  // Obtener parámetros de búsqueda y paginación
  $search = $this->get('search');
  $page = $this->get('page') ? intval($this->get('page')) : 1;
  $limit = $this->get('limit') ? intval($this->get('limit')) : 50;
  $offset = ($page - 1) * $limit;
  
  // NUEVO: Parámetros de ordenamiento para lazy loading
  $sortField = $this->get('sortField');
  $sortOrder = $this->get('sortOrder') ? intval($this->get('sortOrder')) : 1;
  
  // NUEVO: Parámetro de sucursal para filtrado automático
  $sucursal = $this->get('sucursal');
  
  // NUEVO: Filtros dinámicos por columna (JSON desde frontend)
  $columnFilters = $this->get('filters');
  $filters = array();
  if (!empty($columnFilters)) {
    $filters = json_decode($columnFilters, true);
  }

  // Construir la consulta base
  $this->db->from('artsucursal');
  
  // NUEVO: Aplicar filtro automático por sucursal mayorista
  if ($sucursal === '5') {
    $this->db->where('cod_deposito', 2);
  }
  
  // NUEVO: Aplicar filtros dinámicos por columna
  if (!empty($filters)) {
    $this->applyColumnFilters($filters);
  }
  
  // Si hay término de búsqueda, aplicar filtros de texto
  if (!empty($search)) {
    // Escapar el término de búsqueda para seguridad
    $search_escaped = $this->db->escape_like_str($search);
    
    // Construir WHERE con ILIKE para búsqueda insensible a mayúsculas/minúsculas (PostgreSQL)
    $where = "(
      nomart ILIKE '%{$search_escaped}%' OR
      CAST(cd_articulo AS TEXT) ILIKE '%{$search_escaped}%' OR
      cd_barra ILIKE '%{$search_escaped}%' OR
      marca ILIKE '%{$search_escaped}%' OR
      rubro ILIKE '%{$search_escaped}%'
    )";
    
    $this->db->where($where);
  }
  
  // NUEVO: Aplicar ordenamiento dinámico
  if (!empty($sortField)) {
    $direction = ($sortOrder === 1) ? 'ASC' : 'DESC';
    $this->db->order_by($sortField, $direction);
  } else {
    // Ordenamiento por defecto
    $this->db->order_by('nomart', 'ASC');
  }
  
  // Contar total de registros (para paginación)
  $total_query = clone $this->db;
  $total = $total_query->count_all_results();
  
  // Aplicar límite y offset para paginación
  $this->db->limit($limit, $offset);
  
  // Ejecutar consulta
  $query = $this->db->get();
  $resp = $query->result_array();

  if (isset($resp)){
    // Si hay parámetros de paginación, devolver formato paginado
    if ($this->get('page') || $this->get('search')) {
      $respuesta = array(
        "error" => false,
        "mensaje" => array(
          "data" => $resp,
          "total" => $total,
          "page" => $page,
          "limit" => $limit,
          "total_pages" => ceil($total / $limit)
        )
      );
    } else {
      // Mantener compatibilidad con formato anterior
      $respuesta = array(
        "error" => false,
        "mensaje" => $resp
      );
    }
    $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"error"
    );
  $this->response($respuesta);
  }
}

// NUEVO: Método para aplicar filtros dinámicos por columna
private function applyColumnFilters($filters) {
  foreach ($filters as $field => $filterMeta) {
    // PrimeNG envía arrays de filtros, tomar el primer elemento válido
    if (is_array($filterMeta) && !empty($filterMeta)) {
      // Si es array, tomar el primer filtro
      $firstFilter = $filterMeta[0];
      if (!isset($firstFilter['value']) || $firstFilter['value'] === null || $firstFilter['value'] === '') {
        continue;
      }
      $value = $firstFilter['value'];
      $matchMode = isset($firstFilter['matchMode']) ? $firstFilter['matchMode'] : 'contains';
    } else {
      // Si no es array (fallback), usar como objeto directo
      if (!isset($filterMeta['value']) || $filterMeta['value'] === null || $filterMeta['value'] === '') {
        continue;
      }
      $value = $filterMeta['value'];
      $matchMode = isset($filterMeta['matchMode']) ? $filterMeta['matchMode'] : 'contains';
    }
    
    // Validar que el campo es permitido (seguridad)
    if (!$this->isValidField($field)) {
      continue;
    }
    
    // Aplicar filtro según el modo
    switch ($matchMode) {
      case 'equals':
        if ($field === 'cod_deposito' || $field === 'tipo_moneda' || $field === 'cd_articulo') {
          $this->db->where($field, intval($value));
        } else {
          $this->db->where($field, $value);
        }
        break;
        
      case 'notEquals':
        if ($field === 'cod_deposito' || $field === 'tipo_moneda' || $field === 'cd_articulo') {
          $this->db->where($field . ' !=', intval($value));
        } else {
          $this->db->where($field . ' !=', $value);
        }
        break;
        
      case 'contains':
        $value_escaped = $this->db->escape_like_str($value);
        $this->db->where("$field ILIKE '%{$value_escaped}%'");
        break;
        
      case 'startsWith':
        $value_escaped = $this->db->escape_like_str($value);
        $this->db->where("$field ILIKE '{$value_escaped}%'");
        break;
        
      case 'endsWith':
        $value_escaped = $this->db->escape_like_str($value);
        $this->db->where("$field ILIKE '%{$value_escaped}'");
        break;
        
      case 'lt':
        $this->db->where($field . ' <', $value);
        break;
        
      case 'lte':
        $this->db->where($field . ' <=', $value);
        break;
        
      case 'gt':
        $this->db->where($field . ' >', $value);
        break;
        
      case 'gte':
        $this->db->where($field . ' >=', $value);
        break;
    }
  }
}

// NUEVO: Validar campos permitidos para filtros (seguridad)
private function isValidField($field) {
  $allowedFields = array(
    'nomart', 'cd_articulo', 'cd_barra', 'marca', 'rubro', 'estado',
    'cod_deposito', 'tipo_moneda', 'precon', 'prefi1', 'prefi2', 'prefi3', 'prefi4',
    'exi1', 'exi2', 'exi3', 'exi4', 'exi5', 'cd_proveedor', 'cod_iva'
  );
  
  return in_array($field, $allowedFields);
}

public function Bancos_get() 
{
  $query = $this->db->get('bancos');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "No se encontraron registros de bancos"
    );
    $this->response($respuesta);
  }
}

public function Tarjcredito_get() //TOMA DE artprev los datos y los sube a la app
{
  $query = $this->db->get('tarjcredito');  // Produces: SELECT * FROM mytable
  $resp=$query->result_array();

  // Comprobar que todos los campos estén definidos
  foreach ($resp as $key => $tarjeta) {
    // Asegurarse de que el campo id_forma_pago esté definido
    if (!isset($tarjeta['id_forma_pago'])) {
      $resp[$key]['id_forma_pago'] = 0; // valor por defecto
    }
  }

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
  $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"error"
    );
  $this->response($respuesta);
  }
}

public function Vendedores_get() //TOMA DE artprev los datos y los sube a la app
{
  $query = $this->db->get('vendedores');  // Produces: SELECT * FROM mytable
  $resp=$query->result_array();

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
  $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"error"
    );
  $this->response($respuesta);
  }
}
public function Cabecerax_post() //TOMA DE cabecera los datos y los sube a la app
{
  $data = $this->post();
  $sucursal = $data["sucursal"];
  $cliente = $data["cliente"];

  if(isset($sucursal) && isset($cliente)){
    $tabla = "factcab".$sucursal;

    // Modified query to filter by client and non-zero balance
    $this->db->where('cliente', $cliente);
    $this->db->where('saldo !=', 0);
    // FILTRO IMPORTANTE: Solo mostrar facturas reales (no recibos RC) en cuenta corriente
    $this->db->where('tipo !=', 'RC');
    $query = $this->db->get($tabla);
    $resp = $query->result_array();

    if (isset($resp)){
      $respuesta = array(
        "error" => false,
        "mensaje" => $resp
      );
      $this->response($respuesta);
    }
    else {
      $respuesta = array(
        "error" => true,
        "mensaje" => "No se encontraron registros"
      );
      $this->response($respuesta);
    }
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "Faltan parámetros requeridos"
    );
    $this->response($respuesta);
  }
}
public function CabecerasucNombreTarj_post()
{
    $data = $this->post();
    $sucursal = $data["sucursal"];

    if (isset($sucursal)) {
        $tabla = "factcab" . $sucursal;

        // Modificamos la consulta para incluir la tabla tarjcredito con todos sus campos
        $this->db->select($tabla . '.*, tarjcredito.tarjeta, tarjcredito.listaprecio, tarjcredito.activadatos, 
                           tarjcredito.d1, tarjcredito.d2, tarjcredito.d3, tarjcredito.d4, tarjcredito.d5, 
                           tarjcredito.d6, tarjcredito.d7, tarjcredito.idcp_ingreso, tarjcredito.idcp_egreso, 
                           tarjcredito.id_forma_pago')
                 ->from($tabla)
                 ->join('tarjcredito', $tabla . '.cod_condvta = tarjcredito.cod_tarj', 'left');
                 
        // FILTRO IMPORTANTE: Solo mostrar facturas reales (no recibos RC) en reportes
        $this->db->where($tabla . '.tipo !=', 'RC');

        $query = $this->db->get();
        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
            $this->response($respuesta);
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron registros"
            );
            $this->response($respuesta);
        }
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Falta el parámetro de sucursal"
        );
        $this->response($respuesta);
    }
}
public function PedidosucNombreTarj_post()
{
    $data = $this->post();
    $sucursal = $data["sucursal"];

    if (isset($sucursal)) {
        $tabla = "psucursal" . $sucursal;

        // Modificamos la consulta para incluir la tabla tarjcredito con todos sus campos
        $this->db->select($tabla . '.*, tarjcredito.tarjeta, tarjcredito.listaprecio, tarjcredito.activadatos, 
                           tarjcredito.d1, tarjcredito.d2, tarjcredito.d3, tarjcredito.d4, tarjcredito.d5, 
                           tarjcredito.d6, tarjcredito.d7, tarjcredito.idcp_ingreso, tarjcredito.idcp_egreso, 
                           tarjcredito.id_forma_pago')
                 ->from($tabla)
                 ->join('tarjcredito', $tabla . '.cod_tar = tarjcredito.cod_tarj', 'left');

        $query = $this->db->get();
        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
            $this->response($respuesta);
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron registros"
            );
            $this->response($respuesta);
        }
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Falta el parámetro de sucursal"
        );
        $this->response($respuesta);
    }
}
public function Cabecerasuc_post() //TOMA DE cabecera los datos y los sube a la app
{
  $data = $this->post();
  $sucursal = $data["sucursal"];
 

  if(isset($sucursal)){
    $tabla = "factcab".$sucursal;

    // Modified query to filter by client and non-zero balance
    // FILTRO IMPORTANTE: Solo mostrar facturas reales (no recibos RC) en consultas generales
    $this->db->where('tipo !=', 'RC');
    
    $query = $this->db->get($tabla);
    $resp = $query->result_array();

    if (isset($resp)){
      $respuesta = array(
        "error" => false,
        "mensaje" => $resp
      );
      $this->response($respuesta);
    }
    else {
      $respuesta = array(
        "error" => true,
        "mensaje" => "No se encontraron registros"
      );
      $this->response($respuesta);
    }
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "Faltan parámetros requeridos"
    );
    $this->response($respuesta);
  }
}
public function LastIdnum_post()
{
    $data = $this->post();
    $sucursal = $data["sucursal"];

    if (isset($sucursal)) {
        $tabla = "factcab" . $sucursal;

        $this->db->select_max('id_num');
        $query = $this->db->get($tabla);
        $result = $query->row_array();

        if (isset($result['id_num'])) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $result['id_num']
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontró ningún registro en la tabla " . $tabla
            );
        }
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Falta el parámetro 'sucursal'"
        );
    }

    $this->response($respuesta);
}
public function Clisucx_post() //TOMA DE artprev los datos y los sube a la app
{
  $data=$this->post();
  $sucursal=$data["sucursal"];

  if(isset($sucursal) ){

  //$tabla= "clisuc".$sucursal; //ESTA ES LA QUE USABA CON VARIAS TABLAS AHORA SE CAMBIO POR UNA SOLA
  $tabla= "clisuc";
  

  $query = $this->db->get($tabla);  // Produces: SELECT * FROM mytable
  $resp=$query->result_array();

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
  $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"error"
    );
  $this->response($respuesta);
  }
}
 // fin de if isset
else
{
  $respuesta=array
  ( "error"=>true,
    "mensaje"=>"error"
  );
   $this->response($respuesta);
}

}

/* public function Pedidox_post() {
    $data = $this->post();
    $sucursal = $data["sucursal"];

    if (isset($sucursal)) {
        $tabla = "psucursal" . $sucursal;

        $query = $this->db->get($tabla);  // Produces: SELECT * FROM psucursalX (where X is the sucursal number)
        $resp = $query->result_array();

        if (isset($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
            $this->response($respuesta);
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "error"
            );
            $this->response($respuesta);
        }
    }
} */

public function Pedidox_post() {
    $data = $this->post();
    $sucursal = $data["sucursal"];

    if (isset($sucursal)) {
        $tabla = "psucursal" . $sucursal;

        // Realizamos la consulta con JOIN para obtener los datos de ambas tablas
        $this->db->select('ps.*, art.nomart');
        $this->db->from($tabla . ' as ps');
        $this->db->join('artsucursal as art', 'ps.idart = art.idart', 'left');
        $query = $this->db->get();

        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron registros."
            );
        }
        $this->response($respuesta);
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Sucursal no especificada."
        );
        $this->response($respuesta);
    }
}
/* public function PedidoxComprobante_post() {
    $data = $this->post();
    $sucursal = $data["sucursal"];
    $comprobante = $data["comprobante"];

    if (isset($sucursal) && isset($comprobante)) {
        $tabla = "psucursal" . $sucursal;

        // Realizamos la consulta con JOIN para obtener los datos de ambas tablas
        $this->db->select('ps.*, art.nomart');
        $this->db->from($tabla . ' as ps');
        $this->db->join('artsucursal as art', 'ps.idart = art.idart', 'left');
        $this->db->where('ps.numerocomprobante', $comprobante);
        $query = $this->db->get();

        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron registros para el comprobante especificado."
            );
        }
        $this->response($respuesta);
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Sucursal o comprobante no especificados."
        );
        $this->response($respuesta);
    }
} */
public function PedidoxComprobante_post() {
    $data = $this->post();
    $sucursal = $data["sucursal"];
    $comprobante = $data["comprobante"];

    if (isset($sucursal) && isset($comprobante)) {
        $tabla = "psucursal" . $sucursal;

        // Realizamos la consulta con JOIN para obtener los datos de las tres tablas
        // Seleccionamos campos específicos para evitar colisiones de nombres
        $this->db->select('ps.*, art.nomart, tc.tarjeta, tc.listaprecio, tc.activadatos, 
                           tc.d1, tc.d2, tc.d3, tc.d4, tc.d5, tc.d6, tc.d7, 
                           tc.idcp_ingreso, tc.idcp_egreso, tc.id_forma_pago');
        $this->db->from($tabla . ' as ps');
        $this->db->join('artsucursal as art', 'ps.idart = art.idart', 'left');
        $this->db->join('tarjcredito as tc', 'ps.cod_tar = tc.cod_tarj', 'left');
        $this->db->where('ps.numerocomprobante', $comprobante);
        $query = $this->db->get();

        $resp = $query->result_array();

        if (!empty($resp)) {
            // Asegurar que el campo id_forma_pago existe en cada registro
            foreach ($resp as $key => $item) {
                if (!isset($item['id_forma_pago'])) {
                    $resp[$key]['id_forma_pago'] = 0; // valor por defecto
                }
            }

            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron registros para el comprobante especificado."
            );
        }
        $this->response($respuesta);
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Sucursal o comprobante no especificados."
        );
        $this->response($respuesta);
    }
}
public function ReciboxComprobante_post() {
    $data = $this->post();
    $sucursal = $data["sucursal"];
    $comprobante = $data["comprobante"];

    if (isset($sucursal) && isset($comprobante)) {
        $tabla = "recibos". $sucursal;

        // Realizamos la consulta para obtener los datos de la tabla recibos
        $this->db->select('*');
        $this->db->from($tabla);
        $this->db->where('recibo', $comprobante);
        $query = $this->db->get();

        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron registros para el comprobante especificado."
            );
        }
        $this->response($respuesta);
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Sucursal o comprobante no especificados."
        );
        $this->response($respuesta);
    }
}


/* public function Stockpedido_post() {
    $data = $this->post();
    $sucursal = isset($data["sucursal"]) ? $data["sucursal"] : null;
    if ($sucursal !== null) {
        try {
            // 1. Obtener el id_aso de pedidoscb a partir de la sucursal
            $this->db->select('id_aso');
            $this->db->from('pedidoscb');
            $this->db->where('sucursalh', $sucursal);
            $query_pedidoscb = $this->db->get();
            if ($query_pedidoscb->num_rows() == 0) {
                $respuesta = array(
                    "error" => true,
                    "mensaje" => "No se encontraron pedidos para la sucursal especificada."
                );
                $this->response($respuesta, 404); // Devuelve un código 404 Not Found
                return;
            }
            $id_aso_array = $query_pedidoscb->result_array();
            // Extraer los id_aso en un array simple para usarlo en la consulta IN
            $id_aso_values = array_column($id_aso_array, 'id_aso');
            
            // 2. Obtener los items de pedidoitem relacionados con los id_aso encontrados
            // y con estado "Solicitado"
            $this->db->select('*');
            $this->db->from('pedidoitem');
            $this->db->where_in('id_items', $id_aso_values); // Buscar múltiples id_aso
            $this->db->where('estado', 'Solicitado'); // Añadir condición de estado
            $query_pedidoitem = $this->db->get();
            $resp = $query_pedidoitem->result_array();
            
            if (!empty($resp)) {
                $respuesta = array(
                    "error" => false,
                    "mensaje" => $resp
                );
            } else {
                $respuesta = array(
                    "error" => true,
                    "mensaje" => "No se encontraron items Solicitados para la sucursal especificada."
                );
            }
            $this->response($respuesta);
        } catch (Exception $e) {
            $respuesta = array(
                "error" => true,
                "mensaje" => "Error al realizar la consulta: " . $e->getMessage()
            );
            $this->response($respuesta, 500); // Devuelve un código 500 Internal Server Error
        }
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Sucursal no especificada."
        );
        $this->response($respuesta, 400); // Devuelve un código 400 Bad Request
    }
} */

public function Stockpedido_post() {
    $data = $this->post();
    $sucursal = isset($data["sucursal"]) ? $data["sucursal"] : null;
    if ($sucursal !== null) {
        try {
            // 1. Obtener el id_aso de pedidoscb a partir de la sucursal
            $this->db->select('id_aso');
            $this->db->from('pedidoscb');
            $this->db->where('sucursalh', $sucursal);
            $query_pedidoscb = $this->db->get();
            if ($query_pedidoscb->num_rows() == 0) {
                $respuesta = array(
                    "error" => true,
                    "mensaje" => "No se encontraron pedidos para la sucursal especificada."
                );
                $this->response($respuesta, 404); // Devuelve un código 404 Not Found
                return;
            }
            $id_aso_array = $query_pedidoscb->result_array();
            // Extraer los id_aso en un array simple para usarlo en la consulta IN
            $id_aso_values = array_column($id_aso_array, 'id_aso');
            
            // 2. Obtener los items de pedidoitem relacionados con los id_aso encontrados
            // y con estado "Solicitado"
            $this->db->select('*');
            $this->db->from('pedidoitem');
            $this->db->where_in('id_items', $id_aso_values); // Buscar múltiples id_aso
            $this->db->where('estado', 'Solicitado'); // Añadir condición de estado
            $query_pedidoitem = $this->db->get();
            $resp = $query_pedidoitem->result_array();
            
            if (!empty($resp)) {
                // Integrar el campo sucursalh en cada elemento de la respuesta
                foreach ($resp as &$item) { // Usamos & para modificar el elemento original por referencia
                    $item['sucursalh'] = $sucursal; 
                }
                unset($item); // Romper la referencia después del bucle

                $respuesta = array(
                    "error" => false,
                    "mensaje" => $resp
                );
            } else {
                $respuesta = array(
                    "error" => true,
                    "mensaje" => "No se encontraron items Solicitados para la sucursal especificada."
                );
            }
            $this->response($respuesta);
        } catch (Exception $e) {
            $respuesta = array(
                "error" => true,
                "mensaje" => "Error al realizar la consulta: " . $e->getMessage()
            );
            $this->response($respuesta, 500); // Devuelve un código 500 Internal Server Error
        }
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Sucursal no especificada."
        );
        $this->response($respuesta, 400); // Devuelve un código 400 Bad Request
    }
}

/* public function PedidoItemsPorSucursal_post() {
    $data = $this->post();
    $sucursal = isset($data["sucursal"]) ? $data["sucursal"] : null;

    if ($sucursal === null) {
        $respuesta = array(
            "error" => true,
            "mensaje" => "El parámetro 'sucursal' es obligatorio."
        );
        $this->response($respuesta, 400); // Bad Request
        return;
    }

    try {
        // 1. Obtener los id_num de pedidoscb que coinciden con la sucursal.
        $this->db->select('id_num');
        $this->db->from('pedidoscb');
        $this->db->where('sucursald', $sucursal); // Usamos 'sucursald' según tu requerimiento
        $query_pedidoscb = $this->db->get();

        if ($query_pedidoscb->num_rows() === 0) {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron pedidos para la sucursal especificada."
            );
            $this->response($respuesta, 404); // Not Found
            return;
        }

        $id_num_array = $query_pedidoscb->result_array();
        $id_num_values = array_column($id_num_array, 'id_num');


        // 2. Obtener los items de pedidoitem relacionados con los id_num encontrados.
        //  Asumo que 'id_num' en 'pedidoitem' es la clave foránea que conecta con 'pedidoscb'.
        //  Si es un campo diferente, ajusta este nombre en el `where` a continuación.

        $this->db->select('*');
        $this->db->from('pedidoitem');
        $this->db->where_in('id_num', $id_num_values); //  'id_num'  debe coincidir con el nombre del campo en pedidoitem
        $query_pedidoitem = $this->db->get();
        $resp = $query_pedidoitem->result_array();

        if (!empty($resp)) {
            // Agregar el campo 'sucursal' a la respuesta para mayor claridad.
            foreach ($resp as &$item) {
                $item['sucursal'] = $sucursal;
            }
            unset($item);

            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron items de pedido para la sucursal especificada."
            );
        }
        $this->response($respuesta);

    } catch (Exception $e) {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Error en la base de datos: " . $e->getMessage()
        );
        $this->response($respuesta, 500); // Internal Server Error
    }
} */
public function PedidoItemsPorSucursal_post() {
    $data = $this->post();
    $sucursal = isset($data["sucursal"]) ? $data["sucursal"] : null;

    if ($sucursal === null) {
        $respuesta = array(
            "error" => true,
            "mensaje" => "El parámetro 'sucursal' es obligatorio."
        );
        $this->response($respuesta, 400); // Bad Request
        return;
    }

    try {
        // ÚNICA CONSULTA:  Realizamos un JOIN para obtener datos de ambas tablas
        $this->db->select('pi.*, pc.sucursalh, pc.sucursald'); // Seleccionamos todos los campos de pedidoitem y sucursalh de pedidoscb
        $this->db->from('pedidoitem AS pi');
        $this->db->join('pedidoscb AS pc', 'pi.id_num = pc.id_num', 'inner'); // INNER JOIN para asegurar que solo se devuelven filas con coincidencias en ambas tablas
        $this->db->where('pc.sucursald', $sucursal); // Filtro por sucursal en pedidoscb

        $query = $this->db->get();
        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron items de pedido para la sucursal especificada."
            );
        }
        $this->response($respuesta);

    } catch (Exception $e) {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Error en la base de datos: " . $e->getMessage()
        );
        $this->response($respuesta, 500); // Internal Server Error
    }
}

public function PedidoItemsPorSucursalh_post() {
    $data = $this->post();
    $sucursal = isset($data["sucursal"]) ? $data["sucursal"] : null;

    if ($sucursal === null) {
        $respuesta = array(
            "error" => true,
            "mensaje" => "El parámetro 'sucursal' es obligatorio."
        );
        $this->response($respuesta, 400); // Bad Request
        return;
    }

    try {
        // ÚNICA CONSULTA:  Realizamos un JOIN para obtener datos de ambas tablas
        $this->db->select('pi.*, pc.sucursalh, pc.sucursald'); // Seleccionamos todos los campos de pedidoitem y sucursalh de pedidoscb
        $this->db->from('pedidoitem AS pi');
        $this->db->join('pedidoscb AS pc', 'pi.id_num = pc.id_num', 'inner'); // INNER JOIN para asegurar que solo se devuelven filas con coincidencias en ambas tablas
        $this->db->where('pc.sucursalh', $sucursal); // Filtro por sucursal en pedidoscb

        $query = $this->db->get();
        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontraron items de pedido para la sucursal especificada."
            );
        }
        $this->response($respuesta);

    } catch (Exception $e) {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Error en la base de datos: " . $e->getMessage()
        );
        $this->response($respuesta, 500); // Internal Server Error
    }
}


public function RubroPrincipal_get() 
{
  $query = $this->db->get('rubro_principal');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}
public function RubroCompleto_get() 
{
    // Join rubros with rubro_principal using clearer aliases
    $this->db->select('rubros.id_rubro, rubros.cod_rubro, rubros.rubro, 
                       rubros.numerador, rubros.modiprecio, rubros.modidescri, rubros.cod_depo, 
                       rubros.mustuni, rubros.id_rubro_p,
                       rubro_principal.rubro as rubro_principal, 
                       rubro_principal.cod_rubro as cod_rubro_principal');
    $this->db->from('rubros');
    $this->db->join('rubro_principal', 'rubros.id_rubro_p = rubro_principal.id_rubro_p', 'left');
    $query = $this->db->get();
    $resp = $query->result_array();

    if (!empty($resp)) {
        $respuesta = array(
            "error" => false,
            "mensaje" => $resp
        );
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "No se encontraron registros"
        );
    }
    
    $this->response($respuesta);
}
public function Rubro_get() 
{
  $query = $this->db->get('rubros');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}

public function ArtIva_get() 
{
  $query = $this->db->get('artiva');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}

public function Marca_get() 
{
  $query = $this->db->get('marcas');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}

public function Proveedor_get() 
{
  $query = $this->db->get('proveedores');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}
public function TipoMoneda_get() 
{
  $query = $this->db->get('tipomone');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}
public function ValorCambio_get() 
{
  $query = $this->db->get('valorcambio');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}

public function Conflista_get() 
{
  $query = $this->db->get('conf_lista');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}
public function Articulos_get() 
{
  $query = $this->db->get('artsucursal');
  $resp = $query->result_array();

  if (isset($resp)){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else {
    $respuesta = array(
      "error" => true,
      "mensaje" => "error"
    );
    $this->response($respuesta);
  }
}
// --- NUEVA FUNCIÓN ---
public function Cajalista_get() // Obtener todos los registros de cajalistas
{
  $query = $this->db->get('caja_lista');  // Nombre de la tabla en plural y minúsculas
  $resp=$query->result_array();

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
    $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"No se encontraron registros en caja_lista" // Mensaje más específico
    );
    $this->response($respuesta, REST_Controller::HTTP_NOT_FOUND); // Mejor código de estado
  }
}
// --- FIN NUEVA FUNCIÓN ---
// --- Funciones para CajaConcepto ---
public function Cajaconcepto_get()
{
  $query = $this->db->get('caja_conceptos'); // Nombre de tabla plural y minúscula
  $resp=$query->result_array();

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
  $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"No se encontraron registros en cajaconceptos"
    );
  $this->response($respuesta, REST_Controller::HTTP_NOT_FOUND); // Mejor código de error
  }
}

public function CajaconceptoPorIdConcepto_post()
{
  $this->load->database();
  $id_concepto = $this->post('id_concepto');
  
  if (!$id_concepto) {
    $respuesta=array(
      "error"=>true,
      "mensaje"=>"No se proporcionó el id_concepto"
    );
    $this->response($respuesta, REST_Controller::HTTP_BAD_REQUEST);
    return;
  }
  
  $this->db->where('id_concepto', $id_concepto);
  $query = $this->db->get('caja_conceptos');
  $resp = $query->result_array();
  
  if (count($resp) > 0) {
    $respuesta=array(
      "error"=>false,
      "mensaje"=>$resp
    );
    $this->response($respuesta);
  } else {
    $respuesta=array(
      "error"=>true,
      "mensaje"=>"No se encontró el concepto de caja con id: " . $id_concepto
    );
    $this->response($respuesta, REST_Controller::HTTP_NOT_FOUND);
  }
}

public function Cajamovi_get()
{
  // Realizar JOIN con caja_conceptos y caja_lista para obtener las descripciones
  $this->db->select('cm.*, TRIM(cc.descripcion) as descripcion_concepto, TRIM(cl.descripcion) as descripcion_caja');
  $this->db->from('caja_movi cm');
  $this->db->join('caja_conceptos cc', 'cm.codigo_mov = cc.id_concepto', 'left');
  $this->db->join('caja_lista cl', 'cm.caja = cl.id_caja', 'left');
  $query = $this->db->get();
  $resp=$query->result_array();

  if (isset($resp)){
    $respuesta=array
    ("error"=>false,
      "mensaje"=>$resp
    );
  $this->response($respuesta);
  }
  else
  {
    $respuesta=array
    ( "error"=>true,
      "mensaje"=>"No se encontraron registros en cajamovis" // Mensaje más específico
    );
    $this->response($respuesta, REST_Controller::HTTP_NOT_FOUND); // Mejor código de estado
  }
}

public function CajamoviPorSucursal_post()
{
  $data = $this->post();
  $sucursal = isset($data['sucursal']) ? $data['sucursal'] : null;
  
  // Realizar JOIN con caja_conceptos y caja_lista para obtener las descripciones
  $this->db->select('cm.*, TRIM(cc.descripcion) as descripcion_concepto, TRIM(cl.descripcion) as descripcion_caja');
  $this->db->from('caja_movi cm');
  $this->db->join('caja_conceptos cc', 'cm.codigo_mov = cc.id_concepto', 'left');
  $this->db->join('caja_lista cl', 'cm.caja = cl.id_caja', 'left');
  
  if ($sucursal !== null) {
    // Filtrar por sucursal específica
    $this->db->where('cm.sucursal', $sucursal);
  }
  
  $query = $this->db->get();
  $resp = $query->result_array();

  if (isset($resp) && count($resp) > 0){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp
    );
    $this->response($respuesta);
  }
  else
  {
    $respuesta = array(
      "error" => true,
      "mensaje" => "No se encontraron registros de movimientos de caja"
    );
    $this->response($respuesta, REST_Controller::HTTP_NOT_FOUND);
  }
}

// Método agregado para cargar movimientos de caja específicos por sus IDs
public function CajamoviPorIds_post()
{
  $data = $this->post();
  $ids = isset($data['ids']) ? $data['ids'] : array();
  $sucursal = isset($data['sucursal']) ? $data['sucursal'] : null;
  
  // Validar que se proporcionaron IDs
  if (empty($ids) || !is_array($ids)) {
    $respuesta = array(
      "error" => true,
      "mensaje" => "No se proporcionaron IDs válidos"
    );
    $this->response($respuesta, 400);
    return;
  }
  
  // Sanitizar los IDs para evitar SQL injection
  $ids_sanitizados = array_map('intval', $ids);
  
  // Construir la consulta
  $this->db->select('cm.*, TRIM(cc.descripcion) as descripcion_concepto, TRIM(cl.descripcion) as descripcion_caja');
  $this->db->from('caja_movi cm');
  $this->db->join('caja_conceptos cc', 'cm.codigo_mov = cc.id_concepto', 'left');
  $this->db->join('caja_lista cl', 'cm.caja = cl.id_caja', 'left');
  $this->db->where_in('cm.id_movimiento', $ids_sanitizados);
  
  // Si se proporciona sucursal, validar que los movimientos pertenezcan a esa sucursal
  if ($sucursal !== null) {
    $this->db->where('cm.sucursal', $sucursal);
  }
  
  // Ordenar por fecha descendente para consistencia
  $this->db->order_by('cm.fecha_mov', 'DESC');
  $this->db->order_by('cm.id_movimiento', 'DESC');
  
  $query = $this->db->get();
  $resp = $query->result_array();
  
  if (isset($resp) && count($resp) > 0) {
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp,
      "items_solicitados" => count($ids),
      "items_encontrados" => count($resp)
    );
    $this->response($respuesta);
  } else {
    $respuesta = array(
      "error" => false,
      "mensaje" => array(),
      "items_solicitados" => count($ids),
      "items_encontrados" => 0
    );
    $this->response($respuesta);
  }
}

public function CajamoviPaginado_post()
{
  $data = $this->post();
  $sucursal = isset($data['sucursal']) ? $data['sucursal'] : null;
  $pagina = isset($data['pagina']) ? intval($data['pagina']) : 1;
  $porPagina = isset($data['porPagina']) ? intval($data['porPagina']) : 100;
  $fechaDesde = isset($data['fechaDesde']) ? $data['fechaDesde'] : null;
  $fechaHasta = isset($data['fechaHasta']) ? $data['fechaHasta'] : null;
  
  // Validar parámetros
  $pagina = max(1, $pagina);
  $porPagina = max(10, min(1000, $porPagina)); // Máximo 1000 registros por página
  
  // Calcular el offset para la consulta
  $offset = ($pagina - 1) * $porPagina;
  
  // Primero, contar el total de registros con los filtros aplicados
  $this->db->from('caja_movi cm');
  
  if ($sucursal !== null) {
    $this->db->where('cm.sucursal', $sucursal);
  }
  
  if ($fechaDesde !== null && $fechaDesde !== '') {
    $this->db->where('cm.fecha_mov >=', $fechaDesde);
  }
  
  if ($fechaHasta !== null && $fechaHasta !== '') {
    $this->db->where('cm.fecha_mov <=', $fechaHasta);
  }
  
  $totalRegistros = $this->db->count_all_results();
  
  // Calcular el total de páginas
  $totalPaginas = ceil($totalRegistros / $porPagina);
  
  // Ahora realizar la consulta con paginación y JOINs
  $this->db->select('cm.*, TRIM(cc.descripcion) as descripcion_concepto, TRIM(cl.descripcion) as descripcion_caja');
  $this->db->from('caja_movi cm');
  $this->db->join('caja_conceptos cc', 'cm.codigo_mov = cc.id_concepto', 'left');
  $this->db->join('caja_lista cl', 'cm.caja = cl.id_caja', 'left');
  
  if ($sucursal !== null) {
    $this->db->where('cm.sucursal', $sucursal);
  }
  
  if ($fechaDesde !== null && $fechaDesde !== '') {
    $this->db->where('cm.fecha_mov >=', $fechaDesde);
  }
  
  if ($fechaHasta !== null && $fechaHasta !== '') {
    $this->db->where('cm.fecha_mov <=', $fechaHasta);
  }
  
  // Ordenar por fecha descendente y id_movimiento para consistencia
  $this->db->order_by('cm.fecha_mov', 'DESC');
  $this->db->order_by('cm.id_movimiento', 'DESC');
  
  // Aplicar límites de paginación
  $this->db->limit($porPagina, $offset);
  
  $query = $this->db->get();
  $resp = $query->result_array();
  
  if (isset($resp) && count($resp) > 0){
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp,
      "metadatos" => array(
        "pagina_actual" => $pagina,
        "por_pagina" => $porPagina,
        "total_paginas" => $totalPaginas,
        "total_registros" => $totalRegistros
      )
    );
    $this->response($respuesta);
  }
  else
  {
    $respuesta = array(
      "error" => false, // Cambio a false porque no es un error, simplemente no hay datos
      "mensaje" => array(),
      "metadatos" => array(
        "pagina_actual" => $pagina,
        "por_pagina" => $porPagina,
        "total_paginas" => 0,
        "total_registros" => 0
      )
    );
    $this->response($respuesta);
  }
}

public function RubroPrincipalPorId_post() 
{
    $data = $this->post();
    $id_rubro_p = $data["id_rubro_p"];

    if (isset($id_rubro_p)) {
        $this->db->where('id_rubro_p', $id_rubro_p);
        $query = $this->db->get('rubro_principal');
        $resp = $query->result_array();

        if (!empty($resp)) {
            $respuesta = array(
                "error" => false,
                "mensaje" => $resp
            );
        } else {
            $respuesta = array(
                "error" => true,
                "mensaje" => "No se encontró el rubro principal especificado."
            );
        }
    } else {
        $respuesta = array(
            "error" => true,
            "mensaje" => "Falta el parámetro id_rubro_p"
        );
    }
    
    $this->response($respuesta);
}


public function ArticulosPaginados_post() {
  // Obtener los parámetros del POST
  $data = $this->post();
  $pagina = isset($data['pagina']) ? intval($data['pagina']) : 1;
  $porPagina = isset($data['porPagina']) ? intval($data['porPagina']) : 50;

  // Validar parámetros
  $pagina = max(1, $pagina);
  $porPagina = max(10, min(100, $porPagina));

  // Calcular el offset para la consulta
  $offset = ($pagina - 1) * $porPagina;

  // Obtener el total de artículos
  $totalArticulos = $this->db->count_all('artsucursal');

  // Calcular el total de páginas
  $totalPaginas = ceil($totalArticulos / $porPagina);

  // Obtener los artículos de la página actual
  $this->db->limit($porPagina, $offset);
  $this->db->order_by('id_articulo', 'DESC'); // Ordenar por ID descendente
  $query = $this->db->get('artsucursal');
  $articulos = $query->result_array();

  // Preparar la respuesta
  $respuesta = array(
      "error" => false,
      "mensaje" => $articulos,
      "metadatos" => array(
          "pagina_actual" => $pagina,
          "por_pagina" => $porPagina,
          "total_paginas" => $totalPaginas,
          "total_articulos" => $totalArticulos
      )
  );

  $this->response($respuesta);
}

public function BuscarArticulos_post() {
  // Obtener los parámetros del POST
  $data = $this->post();
  $termino = isset($data['termino']) ? trim($data['termino']) : '';
  $pagina = isset($data['pagina']) ? intval($data['pagina']) : 1;
  $porPagina = isset($data['porPagina']) ? intval($data['porPagina']) : 50;

  // Validación básica
  if (empty($termino)) {
      $respuesta = array(
          "error" => true,
          "mensaje" => "El término de búsqueda es requerido"
      );
      $this->response($respuesta);
      return;
  }

  // Validar parámetros
  $termino = $this->db->escape_like_str($termino);
  $pagina = max(1, $pagina);
  $porPagina = max(10, min(100, $porPagina));

  // Calcular el offset para la consulta
  $offset = ($pagina - 1) * $porPagina;

  // Construir la consulta de búsqueda para contar resultados
  $this->db->where("(
      nomart LIKE '%{$termino}%' OR
      cd_articulo LIKE '%{$termino}%' OR
      cd_barra LIKE '%{$termino}%' OR
      marca LIKE '%{$termino}%' OR
      rubro LIKE '%{$termino}%'
  )");
  $totalArticulos = $this->db->count_all_results('artsucursal');

  // Calcular el total de páginas
  $totalPaginas = ceil($totalArticulos / $porPagina);

  // Obtener los artículos de la página actual que coinciden con la búsqueda
  $this->db->where("(
      nomart LIKE '%{$termino}%' OR
      cd_articulo LIKE '%{$termino}%' OR
      cd_barra LIKE '%{$termino}%' OR
      marca LIKE '%{$termino}%' OR
      rubro LIKE '%{$termino}%'
  )");
  $this->db->limit($porPagina, $offset);
  $this->db->order_by('id_articulo', 'DESC'); // Ordenar por ID descendente
  $query = $this->db->get('artsucursal');
  $articulos = $query->result_array();

  // Preparar la respuesta
  $respuesta = array(
      "error" => false,
      "mensaje" => $articulos,
      "metadatos" => array(
          "pagina_actual" => $pagina,
          "por_pagina" => $porPagina,
          "total_paginas" => $totalPaginas,
          "total_articulos" => $totalArticulos,
          "termino_busqueda" => $termino
      )
  );

  $this->response($respuesta);
}

public function BuscarArticulosTexto_post()
  {
      // Validar que tengamos los parámetros necesarios
      $this->form_validation->set_rules('termino', 'Término de búsqueda', 'required');
      $this->form_validation->set_rules('pagina', 'Página', 'numeric');
      $this->form_validation->set_rules('porPagina', 'Items por página', 'numeric');

      if ($this->form_validation->run() === FALSE) {
          $this->response([
              'error' => TRUE,
              'mensaje' => validation_errors()
          ], REST_Controller::HTTP_BAD_REQUEST);
          return;
      }

      // Obtener datos de la solicitud
      $termino = $this->post('termino');
      $pagina = $this->post('pagina') ? $this->post('pagina') : 1;
      $porPagina = $this->post('porPagina') ? $this->post('porPagina') : 50;

      // Calcular offset para paginación
      $offset = ($pagina - 1) * $porPagina;

      // Crear término de búsqueda con comodines
      $terminoBusqueda = '%' . $termino . '%';

      // Construir la consulta SQL base
      $this->db->select('*');
      $this->db->from('artsucursal');

      // Aplicar condiciones solo a campos de texto
      $this->db->group_start();
      $this->db->like('nomart', $termino);
      $this->db->or_like('marca', $termino);
      // Convertir campo cd_articulo a texto antes de aplicar LIKE
      $this->db->or_where("CAST(cd_articulo AS VARCHAR) LIKE", $terminoBusqueda);
      // Convertir campo cd_barra a texto antes de aplicar LIKE
      $this->db->or_where("CAST(cd_barra AS VARCHAR) LIKE", $terminoBusqueda);
      $this->db->or_like('rubro', $termino);
      $this->db->group_end();

      // Consulta para contar total de registros
      $totalRegistros = $this->db->count_all_results('', false);

      // Aplicar límites para paginación
      $this->db->limit($porPagina, $offset);

      // Ejecutar la consulta
      $query = $this->db->get();

      if ($query->num_rows() > 0) {
          // Calcular total de páginas
          $totalPaginas = ceil($totalRegistros / $porPagina);

          // Preparar respuesta
          $this->response([
              'error' => FALSE,
              'mensaje' => $query->result(),
              'metadatos' => [
                  'total_articulos' => $totalRegistros,
                  'total_paginas' => $totalPaginas,
                  'pagina_actual' => $pagina,
                  'por_pagina' => $porPagina
              ]
          ], REST_Controller::HTTP_OK);
      } else {
          $this->response([
              'error' => FALSE,
              'mensaje' => [],
              'metadatos' => [
                  'total_articulos' => 0,
                  'total_paginas' => 0,
                  'pagina_actual' => $pagina,
                  'por_pagina' => $porPagina
              ]
          ], REST_Controller::HTTP_OK);
      }
  }
  
public function ArticuloById_post() {
  $data = $this->post();
  $idArticulo = isset($data['idArticulo']) ? intval($data['idArticulo']) : 0;

  if ($idArticulo <= 0) {
      $respuesta = array(
          "error" => true,
          "mensaje" => "ID de artículo inválido o no proporcionado"
      );
      $this->response($respuesta);
      return;
  }

  $this->db->where('id_articulo', $idArticulo);
  $query = $this->db->get('artsucursal');
  $articulo = $query->row_array();

  if (!$articulo) {
      $respuesta = array(
          "error" => true,
          "mensaje" => "Artículo no encontrado"
      );
  } else {
      $respuesta = array(
          "error" => false,
          "mensaje" => $articulo
      );
  }

  $this->response($respuesta);
}

public function getAllCajamoviByIds_post()
{
  $data = $this->post();
  $ids = isset($data['ids']) ? $data['ids'] : null;
  
  if (!$ids) {
    $respuesta = array(
      "error" => true,
      "mensaje" => "No se proporcionaron IDs"
    );
    $this->response($respuesta);
    return;
  }
  
  // Si los IDs vienen como JSON string, decodificarlos
  if (is_string($ids)) {
    // Verificar si es JSON
    $decodedIds = json_decode($ids, true);
    if (json_last_error() === JSON_ERROR_NONE && is_array($decodedIds)) {
      $ids = $decodedIds;
    } else {
      // Si no es JSON, intentar convertir string separado por comas
      $ids = explode(',', $ids);
    }
  }
  
  // Asegurar que todos los IDs sean enteros
  $ids = array_map('intval', $ids);
  
  // Filtrar IDs válidos (mayores a 0)
  $ids = array_filter($ids, function($id) {
    return $id > 0;
  });
  
  if (empty($ids)) {
    $respuesta = array(
      "error" => true,
      "mensaje" => "No se proporcionaron IDs válidos"
    );
    $this->response($respuesta);
    return;
  }
  
  // Limitar la cantidad de IDs para evitar consultas muy grandes
  if (count($ids) > 500) {
    $ids = array_slice($ids, 0, 500);
  }
  
  // Construir la consulta con JOINs para obtener toda la información necesaria
  $this->db->select('cm.*, TRIM(cc.descripcion) as descripcion_concepto, TRIM(cl.descripcion) as descripcion_caja');
  $this->db->from('caja_movi cm');
  $this->db->join('caja_conceptos cc', 'cm.codigo_mov = cc.id_concepto', 'left');
  $this->db->join('caja_lista cl', 'cm.caja = cl.id_caja', 'left');
  $this->db->where_in('cm.id_movimiento', $ids);
  
  // Mantener el orden de los IDs solicitados
  $this->db->order_by('cm.fecha_mov', 'DESC');
  $this->db->order_by('cm.id_movimiento', 'DESC');
  
  $query = $this->db->get();
  $resp = $query->result_array();
  
  if (isset($resp) && count($resp) > 0) {
    $respuesta = array(
      "error" => false,
      "mensaje" => $resp,
      "metadatos" => array(
        "ids_solicitados" => count($ids),
        "registros_encontrados" => count($resp)
      )
    );
  } else {
    $respuesta = array(
      "error" => false,
      "mensaje" => array(),
      "metadatos" => array(
        "ids_solicitados" => count($ids),
        "registros_encontrados" => 0
      )
    );
  }
  
  $this->response($respuesta);
}

/**
 * FUNCIONES ESPECÍFICAS PARA GENERACIÓN DE PDF HISTORIAL
 * Estas funciones obtienen datos completos para generar PDFs correctos
 */

/**
 * Obtener cabecera completa de factura/presupuesto
 * POST: {sucursal: "1", tipo: "PR", numero_int: 12345, puntoventa: 5}
 */
public function CabeceraCompletaPDF_post()
{
    $data = $this->post();
    
    // Validar parámetros requeridos
    if (!isset($data['sucursal']) || !isset($data['tipo']) || !isset($data['numero_int']) || !isset($data['puntoventa'])) {
        $this->response([
            'error' => true,
            'mensaje' => 'Faltan parámetros requeridos: sucursal, tipo, numero_int, puntoventa'
        ], 400);
        return;
    }
    
    $sucursal = $data['sucursal'];
    $tipo = $data['tipo'];
    $numero_int = $data['numero_int'];
    $puntoventa = $data['puntoventa'];
    
    $tabla = 'factcab' . $sucursal;
    
    // Verificar si la tabla existe
    if (!$this->db->table_exists($tabla)) {
        $this->response([
            'error' => true,
            'mensaje' => "La tabla $tabla no existe"
        ], 404);
        return;
    }
    
    // Construir consulta
    $this->db->select('tipo, numero_int, numero_fac, cliente, emitido, puntoventa, letra, usuario, cod_sucursal');
    $this->db->from($tabla);
    $this->db->where('tipo', $tipo);
    $this->db->where('numero_int', $numero_int);
    $this->db->where('puntoventa', $puntoventa);
    $this->db->limit(1);
    
    $query = $this->db->get();
    $result = $query->result_array();
    
    if (count($result) > 0) {
        $this->response([
            'error' => false,
            'data' => $result[0]
        ]);
    } else {
        $this->response([
            'error' => true,
            'mensaje' => 'No se encontró la cabecera solicitada'
        ], 404);
    }
}

/**
 * Obtener cliente completo por ID y sucursal
 * POST: {idCliente: 14243, sucursal: "1"}
 */
public function ClienteCompletoPDF_post()
{
    $data = $this->post();
    
    if (!isset($data['idCliente']) || !isset($data['sucursal'])) {
        $this->response([
            'error' => true,
            'mensaje' => 'Faltan parámetros requeridos: idCliente, sucursal'
        ], 400);
        return;
    }
    
    $idCliente = $data['idCliente'];
    $sucursal = $data['sucursal'];
    
    $this->db->select('idcli, nombre, direccion, dni, cuit, tipoiva');
    $this->db->from('clisuc');
    $this->db->where('idcli', $idCliente);
    // Buscar en cualquier sucursal si no encuentra en la especificada
    $this->db->limit(1);
    
    $query = $this->db->get();
    $result = $query->result_array();
    
    if (count($result) > 0) {
        // Limpiar datos (trim espacios)
        $cliente = $result[0];
        $cliente['nombre'] = trim($cliente['nombre']);
        $cliente['direccion'] = trim($cliente['direccion']);
        $cliente['tipoiva'] = trim($cliente['tipoiva']);
        
        $this->response([
            'error' => false,
            'data' => $cliente
        ]);
    } else {
        $this->response([
            'error' => true,
            'mensaje' => "Cliente con ID $idCliente no encontrado en sucursal $sucursal"
        ], 404);
    }
}

/**
 * Obtener productos de una venta específica
 * POST: {sucursal: "1", tipodoc: "PR", numerocomprobante: 12345, puntoventa: 5}
 */
public function ProductosVentaPDF_post()
{
    $data = $this->post();
    
    if (!isset($data['sucursal']) || !isset($data['tipodoc']) || !isset($data['numerocomprobante']) || !isset($data['puntoventa'])) {
        $this->response([
            'error' => true,
            'mensaje' => 'Faltan parámetros requeridos: sucursal, tipodoc, numerocomprobante, puntoventa'
        ], 400);
        return;
    }
    
    $sucursal = $data['sucursal'];
    $tipodoc = $data['tipodoc'];
    $numerocomprobante = $data['numerocomprobante'];
    $puntoventa = $data['puntoventa'];
    
    $tabla = 'psucursal' . $sucursal;
    
    // Verificar si la tabla existe
    if (!$this->db->table_exists($tabla)) {
        $this->response([
            'error' => true,
            'mensaje' => "La tabla $tabla no existe"
        ], 404);
        return;
    }
    
    $this->db->select('idart, cantidad, precio, nomart');
    $this->db->from($tabla);
    $this->db->where('tipodoc', $tipodoc);
    $this->db->where('numerocomprobante', $numerocomprobante);
    $this->db->where('puntoventa', $puntoventa);
    // Remover filtro por estado ya que los productos pueden tener diferentes estados
    $this->db->order_by('idart', 'ASC');
    
    $query = $this->db->get();
    $result = $query->result_array();
    
    // Limpiar nombres de productos
    foreach ($result as &$item) {
        $item['nomart'] = trim($item['nomart']);
    }
    
    $this->response([
        'error' => false,
        'data' => $result
    ]);
}

/**
 * Obtener información de sucursal
 * POST: {sucursal: "1"}
 */
public function SucursalInfoPDF_post()
{
    $data = $this->post();
    
    if (!isset($data['sucursal'])) {
        $this->response([
            'error' => true,
            'mensaje' => 'Falta parámetro requerido: sucursal'
        ], 400);
        return;
    }
    
    $sucursal = $data['sucursal'];
    
    $this->db->select('cod_sucursal, sucursal');
    $this->db->from('sucursales');
    $this->db->where('cod_sucursal', $sucursal);
    $this->db->limit(1);
    
    $query = $this->db->get();
    $result = $query->result_array();
    
    if (count($result) > 0) {
        $sucursalInfo = $result[0];
        $sucursalInfo['sucursal'] = trim($sucursalInfo['sucursal']);
        
        $this->response([
            'error' => false,
            'data' => $sucursalInfo
        ]);
    } else {
        // Fallback si no encuentra la sucursal
        $this->response([
            'error' => false,
            'data' => [
                'cod_sucursal' => $sucursal,
                'sucursal' => "Sucursal $sucursal"
            ]
        ]);
    }
}

/**
 * Determinar número de comprobante correcto para PDFs
 * POST: {tipo: "PR", numero_fac: 0, numero_int: 12345}
 */
public function NumeroComprobantePDF_post()
{
    $data = $this->post();
    
    if (!isset($data['tipo'])) {
        $this->response([
            'error' => true,
            'mensaje' => 'Falta parámetro requerido: tipo'
        ], 400);
        return;
    }
    
    $tipo = $data['tipo'];
    $numero_fac = isset($data['numero_fac']) ? intval($data['numero_fac']) : 0;
    $numero_int = isset($data['numero_int']) ? intval($data['numero_int']) : 0;
    
    $numero_final = 0;
    
    // Lógica para determinar número correcto
    if ($tipo === 'PR') {
        // Para presupuestos, usar numero_int si numero_fac es 0
        if ($numero_fac > 0) {
            $numero_final = $numero_fac;
        } else if ($numero_int > 0) {
            $numero_final = $numero_int;
        } else {
            $numero_final = 1; // Fallback
        }
    } else {
        // Para otros tipos, preferir numero_fac
        if ($numero_fac > 0) {
            $numero_final = $numero_fac;
        } else if ($numero_int > 0) {
            $numero_final = $numero_int;
        } else {
            $numero_final = 1; // Fallback
        }
    }
    
    $this->response([
        'error' => false,
        'data' => [
            'numero_comprobante' => $numero_final,
            'numero_formateado' => str_pad($numero_final, 8, '0', STR_PAD_LEFT)
        ]
    ]);
}

}

